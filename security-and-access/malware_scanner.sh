#!/bin/bash
# malware_scanner.sh
# Script to scan directories for suspicious files and potential malware.

set -euo pipefail

#=====================================================================
# CONFIGURATION AND DEPENDENCIES
#=====================================================================
source "$(dirname "$0")/../functions/common-init.sh"
# DEFAULT VALUES
#=====================================================================
SCAN_DIR=""
LOG_FILE="/dev/null"
SCAN_DEPTH="-1"  # Unlimited depth by default
QUARANTINE_DIR=""
CHECK_HIDDEN=true
CHECK_PERMISSIONS=true
CHECK_EXECUTABLES=true
CHECK_SCRIPTS=true
CHECK_SUSPICIOUS_NAMES=true
CHECK_SUSPICIOUS_CONTENT=true
CHECK_LARGE_FILES=true
LARGE_FILE_THRESHOLD=10485760  # 10MB
VERBOSE=false
REPORT_FILE=""
SCAN_SUMMARY=true
MAX_PROCS=4      # Maximum number of parallel processes
SHOW_PROGRESS=true

# Suspicious filename patterns
SUSPICIOUS_NAMES=(
  "backdoor" "trojan" "virus" "malware" "hack" "crack" "keygen" 
  "spyware" "rootkit" "exploit" ".vbs" ".scr" ".pif" 
  "svchost" "lsass" "csrss" "winlogon" "system32" 
  ".php.jpg" ".elf.txt" ".py.doc" ".js.pdf" ".sh.png"
)

# Suspicious content patterns
SUSPICIOUS_CONTENT=(
  "eval(base64_decode" "shell_exec" "passthru" "system(" 
  "chmod 777" "nc -e /bin/sh" "/dev/tcp/" "curl -s" 
  "wget -O-" "curl | bash" "wget | bash" 
  "base64 --decode" "gethostbyname" "exec(" "pcntl_exec"
  "uname -a" "/etc/passwd" "/etc/shadow" "id_rsa" 
  "meterpreter" "metasploit" "reverse shell" 
)

#=====================================================================
# USAGE AND HELP
#=====================================================================
usage() {
  print_with_separator "Malware Scanner Script"
  echo -e "\033[1;34mDescription:\033[0m"
  echo "  This script scans directories for suspicious files and potential malware."
  echo
  echo -e "\033[1;34mUsage:\033[0m"
  echo "  $0 <scan_directory> [options]"
  echo
  echo -e "\033[1;34mOptions:\033[0m"
  echo -e "  \033[1;36m<scan_directory>\033[0m               (Required) Directory to scan."
  echo -e "  \033[1;33m--log <log_file>\033[0m               (Optional) Path to save the scan log."
  echo -e "  \033[1;33m--report <report_file>\033[0m         (Optional) Path to save detailed report."
  echo -e "  \033[1;33m--depth <level>\033[0m                (Optional) Maximum directory depth to scan (-1 for unlimited)."
  echo -e "  \033[1;33m--quarantine <directory>\033[0m       (Optional) Move suspicious files to this directory."
  echo -e "  \033[1;33m--no-hidden\033[0m                    (Optional) Skip hidden files and directories."
  echo -e "  \033[1;33m--no-permissions\033[0m               (Optional) Skip checking for suspicious permissions."
  echo -e "  \033[1;33m--no-executables\033[0m               (Optional) Skip checking executable files."
  echo -e "  \033[1;33m--no-scripts\033[0m                   (Optional) Skip checking script files."
  echo -e "  \033[1;33m--no-names\033[0m                     (Optional) Skip checking suspicious filenames."
  echo -e "  \033[1;33m--no-content\033[0m                   (Optional) Skip checking file contents."
  echo -e "  \033[1;33m--no-large-files\033[0m               (Optional) Skip checking large files."
  echo -e "  \033[1;33m--large-threshold <bytes>\033[0m      (Optional) Set threshold for large files (default: 10MB)."
  echo -e "  \033[1;33m--max-procs <number>\033[0m           (Optional) Maximum number of parallel processes (default: 4)."
  echo -e "  \033[1;33m--no-progress\033[0m                  (Optional) Don't show progress during scan."
  echo -e "  \033[1;33m--no-summary\033[0m                   (Optional) Don't show summary statistics."
  echo -e "  \033[1;33m--verbose\033[0m                      (Optional) Show detailed scan information."
  echo -e "  \033[1;33m--help\033[0m                         (Optional) Display this help message."
  echo
  echo -e "\033[1;34mExamples:\033[0m"
  echo "  $0 /path/to/scan --log scan_results.log"
  echo "  $0 /path/to/scan --quarantine /path/to/quarantine --report report.txt"
  echo "  $0 /path/to/scan --depth 3 --no-content --no-large-files"
  echo "  $0 /path/to/scan --verbose --max-procs 8"
  print_with_separator
  exit 1
}

#=====================================================================
# ARGUMENT PARSING
#=====================================================================
parse_args() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --help)
        usage
        ;;
      --log)
        if [ -z "${2:-}" ]; then
          format-echo "ERROR" "No log file provided after --log."
          usage
        fi
        LOG_FILE="$2"
        shift 2
        ;;
      --report)
        if [ -z "${2:-}" ]; then
          format-echo "ERROR" "No report file provided after --report."
          usage
        fi
        REPORT_FILE="$2"
        shift 2
        ;;
      --depth)
        if [ -z "${2:-}" ] || ! [[ "$2" =~ ^-?[0-9]+$ ]]; then
          format-echo "ERROR" "Invalid depth value: ${2:-}"
          usage
        fi
        SCAN_DEPTH="$2"
        shift 2
        ;;
      --quarantine)
        if [ -z "${2:-}" ]; then
          format-echo "ERROR" "No directory provided after --quarantine."
          usage
        fi
        QUARANTINE_DIR="$2"
        shift 2
        ;;
      --no-hidden)
        CHECK_HIDDEN=false
        shift
        ;;
      --no-permissions)
        CHECK_PERMISSIONS=false
        shift
        ;;
      --no-executables)
        CHECK_EXECUTABLES=false
        shift
        ;;
      --no-scripts)
        CHECK_SCRIPTS=false
        shift
        ;;
      --no-names)
        CHECK_SUSPICIOUS_NAMES=false
        shift
        ;;
      --no-content)
        CHECK_SUSPICIOUS_CONTENT=false
        shift
        ;;
      --no-large-files)
        CHECK_LARGE_FILES=false
        shift
        ;;
      --large-threshold)
        if [ -z "${2:-}" ] || ! [[ "$2" =~ ^[0-9]+$ ]]; then
          format-echo "ERROR" "Invalid threshold value: ${2:-}"
          usage
        fi
        LARGE_FILE_THRESHOLD="$2"
        shift 2
        ;;
      --max-procs)
        if [ -z "${2:-}" ] || ! [[ "$2" =~ ^[0-9]+$ ]] || [ "$2" -lt 1 ]; then
          format-echo "ERROR" "Invalid process count: ${2:-}"
          usage
        fi
        MAX_PROCS="$2"
        shift 2
        ;;
      --no-progress)
        SHOW_PROGRESS=false
        shift
        ;;
      --no-summary)
        SCAN_SUMMARY=false
        shift
        ;;
      --verbose)
        VERBOSE=true
        shift
        ;;
      *)
        if [ -z "$SCAN_DIR" ]; then
          SCAN_DIR="$1"
          shift
        else
          format-echo "ERROR" "Unknown option: $1"
          usage
        fi
        ;;
    esac
  done
}

#=====================================================================
# SCANNING FUNCTIONS
#=====================================================================
# Initialize scan results
initialize_scan_results() {
  # Create temporary files for results
  local results_dir
  results_dir=$(mktemp -d) || {
    format-echo "ERROR" "Failed to create temporary directory"
    exit 1
  }
  
  # Add results directory to cleanup list
  TEMP_FILES+=("$results_dir")
  
  # Create result files for each category
  EXECUTABLE_RESULTS="$results_dir/executable_results.txt"
  SCRIPT_RESULTS="$results_dir/script_results.txt"
  SUSPICIOUS_NAME_RESULTS="$results_dir/suspicious_name_results.txt"
  SUSPICIOUS_CONTENT_RESULTS="$results_dir/suspicious_content_results.txt"
  SUSPICIOUS_PERMISSION_RESULTS="$results_dir/suspicious_permission_results.txt"
  LARGE_FILE_RESULTS="$results_dir/large_file_results.txt"
  HIDDEN_FILE_RESULTS="$results_dir/hidden_file_results.txt"
  
  # Initialize all result files
  > "$EXECUTABLE_RESULTS"
  > "$SCRIPT_RESULTS"
  > "$SUSPICIOUS_NAME_RESULTS"
  > "$SUSPICIOUS_CONTENT_RESULTS"
  > "$SUSPICIOUS_PERMISSION_RESULTS"
  > "$LARGE_FILE_RESULTS"
  > "$HIDDEN_FILE_RESULTS"
  
  # Add all result files to cleanup list
  TEMP_FILES+=("$EXECUTABLE_RESULTS" "$SCRIPT_RESULTS" "$SUSPICIOUS_NAME_RESULTS")
  TEMP_FILES+=("$SUSPICIOUS_CONTENT_RESULTS" "$SUSPICIOUS_PERMISSION_RESULTS")
  TEMP_FILES+=("$LARGE_FILE_RESULTS" "$HIDDEN_FILE_RESULTS")
  
  # Create master results file
  MASTER_RESULTS="$results_dir/master_results.txt"
  > "$MASTER_RESULTS"
  TEMP_FILES+=("$MASTER_RESULTS")
}

# Get the total file count for progress reporting
get_file_count() {
  local dir="$1"
  local depth_arg=""
  
  if [ "$SCAN_DEPTH" -ge 0 ]; then
    depth_arg="-maxdepth $SCAN_DEPTH"
  fi
  
  # Handle hidden files according to settings
  local hidden_arg=""
  if [ "$CHECK_HIDDEN" != true ]; then
    hidden_arg="-not -path '*/\.*'"
  fi
  
  # Count files
  # Using eval to properly handle the conditional arguments
  eval find \"$dir\" $depth_arg -type f $hidden_arg | wc -l
}

# Main scanning function
scan_directory() {
  local dir="$1"
  local total_files
  local depth_arg=""
  
  # Set depth argument if specified
  if [ "$SCAN_DEPTH" -ge 0 ]; then
    depth_arg="-maxdepth $SCAN_DEPTH"
  fi
  
  # Handle hidden files according to settings
  local hidden_arg=""
  if [ "$CHECK_HIDDEN" != true ]; then
    hidden_arg="-not -path '*/\.*'"
  fi
  
  # Get total file count for progress if needed
  if [ "$SHOW_PROGRESS" = true ]; then
    format-echo "INFO" "Counting files for progress tracking..."
    total_files=$(get_file_count "$dir")
    format-echo "INFO" "Found $total_files files to scan"
  fi
  
  # Use find to get the list of all files
  format-echo "INFO" "Starting file scan..."
  
  # Create a file list
  local file_list
  file_list=$(mktemp)
  TEMP_FILES+=("$file_list")
  
  # Using eval to properly handle the conditional arguments
  eval find \"$dir\" $depth_arg -type f $hidden_arg > "$file_list"
  
  # Check if we found any files
  if [ ! -s "$file_list" ]; then
    format-echo "WARNING" "No files found to scan in directory: $dir"
    return 0
  fi
  
  # Process files in parallel for better performance
  local file_count=0
  local scanned_count=0
  local total_line_count
  total_line_count=$(wc -l < "$file_list")
  
  format-echo "INFO" "Scanning $total_line_count files..."
  
  # Export the necessary functions and variables for parallel processing
  export -f check_file
  export -f check_hidden
  export -f check_permissions
  export -f check_executable
  export -f check_script
  export -f check_suspicious_name
  export -f check_suspicious_content
  export -f check_large_file
  export -f format-echo
  export VERBOSE CHECK_HIDDEN CHECK_PERMISSIONS CHECK_EXECUTABLES
  export CHECK_SCRIPTS CHECK_SUSPICIOUS_NAMES CHECK_SUSPICIOUS_CONTENT CHECK_LARGE_FILES
  export LARGE_FILE_THRESHOLD EXECUTABLE_RESULTS SCRIPT_RESULTS
  export SUSPICIOUS_NAME_RESULTS SUSPICIOUS_CONTENT_RESULTS SUSPICIOUS_PERMISSION_RESULTS
  export LARGE_FILE_RESULTS HIDDEN_FILE_RESULTS MASTER_RESULTS
  export SUSPICIOUS_NAMES SUSPICIOUS_CONTENT
  
  # Process files in parallel
  cat "$file_list" | xargs -I{} -P "$MAX_PROCS" bash -c "check_file \"{}\" $scanned_count $total_line_count"
  
  # Ensure all background processes are complete
  wait
  
  format-echo "SUCCESS" "Scan completed for $total_line_count files"
  return 0
}

# Process an individual file
check_file() {
  local file="$1"
  local current_count="$2"
  local total_count="$3"
  local results=()
  
  # Skip directories (shouldn't happen but just in case)
  if [ -d "$file" ]; then
    return 0
  fi
  
  # Show progress
  if [ "$SHOW_PROGRESS" = true ] && [ "$((current_count % 100))" -eq 0 ]; then
    local percent=$((current_count * 100 / total_count))
    format-echo "INFO" "Progress: $percent% ($current_count/$total_count)"
  fi
  
  # Verbose output
  if [ "$VERBOSE" = true ]; then
    format-echo "INFO" "Scanning file: $file"
  fi
  
  # Perform checks based on configuration
  local is_suspicious=false
  
  # Check if file is hidden
  if [ "$CHECK_HIDDEN" = true ] && check_hidden "$file"; then
    echo "$file" >> "$HIDDEN_FILE_RESULTS"
    results+=("Hidden file")
    is_suspicious=true
  fi
  
  # Check file permissions
  if [ "$CHECK_PERMISSIONS" = true ] && check_permissions "$file"; then
    echo "$file" >> "$SUSPICIOUS_PERMISSION_RESULTS"
    results+=("Suspicious permissions")
    is_suspicious=true
  fi
  
  # Check if file is executable
  if [ "$CHECK_EXECUTABLES" = true ] && check_executable "$file"; then
    echo "$file" >> "$EXECUTABLE_RESULTS"
    results+=("Executable file")
    is_suspicious=true
  fi
  
  # Check if file is a script
  if [ "$CHECK_SCRIPTS" = true ] && check_script "$file"; then
    echo "$file" >> "$SCRIPT_RESULTS"
    results+=("Script file")
    is_suspicious=true
  fi
  
  # Check for suspicious filename
  if [ "$CHECK_SUSPICIOUS_NAMES" = true ] && check_suspicious_name "$file"; then
    echo "$file" >> "$SUSPICIOUS_NAME_RESULTS"
    results+=("Suspicious filename")
    is_suspicious=true
  fi
  
  # Check for suspicious content
  if [ "$CHECK_SUSPICIOUS_CONTENT" = true ] && check_suspicious_content "$file"; then
    echo "$file" >> "$SUSPICIOUS_CONTENT_RESULTS"
    results+=("Suspicious content")
    is_suspicious=true
  fi
  
  # Check for large files
  if [ "$CHECK_LARGE_FILES" = true ] && check_large_file "$file"; then
    echo "$file" >> "$LARGE_FILE_RESULTS"
    results+=("Large file")
    is_suspicious=true
  fi
  
  # If the file is suspicious, add it to the master results
  if [ "$is_suspicious" = true ]; then
    # Join the results array with commas
    local reasons
    reasons=$(printf "%s" "${results[@]/#/, }")
    reasons=${reasons:2}  # Remove the leading ", "
    
    # Append to master results
    echo "$file [Reasons: $reasons]" >> "$MASTER_RESULTS"
    
    # Verbose output
    if [ "$VERBOSE" = true ]; then
      format-echo "WARNING" "Suspicious file: $file ($reasons)"
    fi
  fi
}

# Check if a file is hidden
check_hidden() {
  local file="$1"
  local basename
  
  # Get the basename of the file
  basename=$(basename "$file")
  
  # Check if the basename starts with a dot
  if [[ "$basename" == .* ]]; then
    return 0  # File is hidden
  fi
  
  return 1  # File is not hidden
}

# Check for suspicious permissions
check_permissions() {
  local file="$1"
  local perms
  
  # Get file permissions
  perms=$(stat -c "%a" "$file" 2>/dev/null || stat -f "%Lp" "$file" 2>/dev/null)
  
  # Check for world-writable or SUID/SGID
  if [[ "$perms" == *"7"* || "$perms" == *"6"* || "$perms" == "777" || 
        "$perms" == "4777" || "$perms" == "2777" || "$perms" == "6777" ]]; then
    return 0  # Suspicious permissions
  fi
  
  return 1  # Normal permissions
}

# Check if a file is executable
check_executable() {
  local file="$1"
  
  # Use file command to detect executable
  if file "$file" | grep -i -E 'executable|ELF|PE32|Mach-O' > /dev/null; then
    return 0  # File is executable
  fi
  
  return 1  # File is not executable
}

# Check if a file is a script
check_script() {
  local file="$1"
  
  # Check file extension
  if [[ "$file" =~ \.(sh|bash|py|pl|rb|php|js|vbs|ps1)$ ]]; then
    return 0  # File is a script
  fi
  
  # Check file content for shebang
  if head -n 1 "$file" 2>/dev/null | grep -E '^#!.*/(ba)?sh|python|perl|ruby|php' > /dev/null; then
    return 0  # File is a script
  fi
  
  return 1  # File is not a script
}

# Check for suspicious filename
check_suspicious_name() {
  local file="$1"
  local basename
  
  # Get the basename of the file
  basename=$(basename "$file")
  
  # Check against suspicious patterns
  for pattern in "${SUSPICIOUS_NAMES[@]}"; do
    if [[ "$basename" == *"$pattern"* ]]; then
      return 0  # Suspicious filename
    fi
  done
  
  # Check for double extensions
  if [[ "$basename" =~ \.[^.]+\.[^.]+$ && 
        ! "$basename" =~ \.(tar\.gz|tar\.bz2|tar\.xz)$ ]]; then
    return 0  # Suspicious double extension
  fi
  
  return 1  # Normal filename
}

# Check for suspicious content
check_suspicious_content() {
  local file="$1"
  
  # Skip binary files
  if file "$file" | grep -i -E 'binary|data|executable|archive|compressed' > /dev/null; then
    return 1  # Skip binary files
  fi
  
  # Skip large files for content scan
  if [ -f "$file" ] && [ "$(stat -c "%s" "$file" 2>/dev/null || stat -f "%z" "$file" 2>/dev/null)" -gt 1048576 ]; then
    return 1  # Skip files > 1MB for content scan
  fi
  
  # Check against suspicious patterns
  for pattern in "${SUSPICIOUS_CONTENT[@]}"; do
    if grep -l "$pattern" "$file" > /dev/null 2>&1; then
      return 0  # Suspicious content
    fi
  done
  
  return 1  # Normal content
}

# Check for large files
check_large_file() {
  local file="$1"
  local size
  
  # Get file size
  size=$(stat -c "%s" "$file" 2>/dev/null || stat -f "%z" "$file" 2>/dev/null)
  
  # Check if file is larger than threshold
  if [ "$size" -gt "$LARGE_FILE_THRESHOLD" ]; then
    return 0  # Large file
  fi
  
  return 1  # Normal sized file
}

# Quarantine suspicious files
quarantine_files() {
  local quarantine_dir="$1"
  local count=0
  
  # Check if quarantine directory exists, create if not
  if [ ! -d "$quarantine_dir" ]; then
    if ! mkdir -p "$quarantine_dir"; then
      format-echo "ERROR" "Failed to create quarantine directory: $quarantine_dir"
      return 1
    fi
  fi
  
  # Check if master results file exists
  if [ ! -f "$MASTER_RESULTS" ]; then
    format-echo "ERROR" "Master results file not found"
    return 1
  fi
  
  # Check if there are any suspicious files
  if [ ! -s "$MASTER_RESULTS" ]; then
    format-echo "INFO" "No suspicious files to quarantine"
    return 0
  fi
  
  format-echo "INFO" "Quarantining suspicious files to: $quarantine_dir"
  
  # Process each suspicious file
  while IFS= read -r line; do
    # Extract file path (everything before the [Reasons: part)
    local file
    file=$(echo "$line" | sed -E 's/ \[Reasons:.*//')
    
    # Skip if file doesn't exist
    if [ ! -f "$file" ]; then
      format-echo "WARNING" "File not found: $file"
      continue
    fi
    
    # Create directory structure in quarantine dir
    local rel_path
    rel_path=$(dirname "${file#$SCAN_DIR}")
    local target_dir="$quarantine_dir$rel_path"
    
    # Create target directory
    if ! mkdir -p "$target_dir"; then
      format-echo "ERROR" "Failed to create directory: $target_dir"
      continue
    fi
    
    # Move file to quarantine
    if mv "$file" "$target_dir/"; then
      count=$((count + 1))
      format-echo "SUCCESS" "Quarantined: $file"
    else
      format-echo "ERROR" "Failed to quarantine: $file"
    fi
  done < "$MASTER_RESULTS"
  
  format-echo "SUCCESS" "Quarantined $count suspicious files"
  return 0
}

# Generate detailed report
generate_report() {
  local report_file="$1"
  local total_suspicious
  
  # Count suspicious files
  total_suspicious=$(wc -l < "$MASTER_RESULTS")
  
  # Create report header
  {
    print_with_separator "Malware Scan Report - $(date)"
    echo "Scan Directory: $SCAN_DIR"
    echo "Scan Depth: $([ "$SCAN_DEPTH" -lt 0 ] && echo "Unlimited" || echo "$SCAN_DEPTH")"
    echo "Date: $(date)"
    echo
    echo "==================== SUMMARY ===================="
    echo "Total Suspicious Files: $total_suspicious"
    
    # Count files by category
    if [ -f "$EXECUTABLE_RESULTS" ]; then
      echo "Executable Files: $(wc -l < "$EXECUTABLE_RESULTS")"
    fi
    
    if [ -f "$SCRIPT_RESULTS" ]; then
      echo "Script Files: $(wc -l < "$SCRIPT_RESULTS")"
    fi
    
    if [ -f "$SUSPICIOUS_NAME_RESULTS" ]; then
      echo "Suspicious Filenames: $(wc -l < "$SUSPICIOUS_NAME_RESULTS")"
    fi
    
    if [ -f "$SUSPICIOUS_CONTENT_RESULTS" ]; then
      echo "Files with Suspicious Content: $(wc -l < "$SUSPICIOUS_CONTENT_RESULTS")"
    fi
    
    if [ -f "$SUSPICIOUS_PERMISSION_RESULTS" ]; then
      echo "Files with Suspicious Permissions: $(wc -l < "$SUSPICIOUS_PERMISSION_RESULTS")"
    fi
    
    if [ -f "$LARGE_FILE_RESULTS" ]; then
      echo "Large Files: $(wc -l < "$LARGE_FILE_RESULTS")"
    fi
    
    if [ -f "$HIDDEN_FILE_RESULTS" ]; then
      echo "Hidden Files: $(wc -l < "$HIDDEN_FILE_RESULTS")"
    fi
    
    echo "==============================================="
    echo
    
    # Detailed results
    if [ "$total_suspicious" -gt 0 ]; then
      echo "==================== DETAILED RESULTS ===================="
      echo "The following files were flagged as suspicious:"
      echo
      
      # Print master results
      cat "$MASTER_RESULTS"
      
      echo
      echo "==============================================="
    fi
    
    # Category details
    if [ -s "$EXECUTABLE_RESULTS" ]; then
      echo
      echo "==================== EXECUTABLE FILES ===================="
      cat "$EXECUTABLE_RESULTS"
    fi
    
    if [ -s "$SCRIPT_RESULTS" ]; then
      echo
      echo "==================== SCRIPT FILES ===================="
      cat "$SCRIPT_RESULTS"
    fi
    
    if [ -s "$SUSPICIOUS_NAME_RESULTS" ]; then
      echo
      echo "==================== SUSPICIOUS FILENAMES ===================="
      cat "$SUSPICIOUS_NAME_RESULTS"
    fi
    
    if [ -s "$SUSPICIOUS_CONTENT_RESULTS" ]; then
      echo
      echo "==================== SUSPICIOUS CONTENT ===================="
      cat "$SUSPICIOUS_CONTENT_RESULTS"
    fi
    
    if [ -s "$SUSPICIOUS_PERMISSION_RESULTS" ]; then
      echo
      echo "==================== SUSPICIOUS PERMISSIONS ===================="
      cat "$SUSPICIOUS_PERMISSION_RESULTS"
    fi
    
    if [ -s "$LARGE_FILE_RESULTS" ]; then
      echo
      echo "==================== LARGE FILES ===================="
      cat "$LARGE_FILE_RESULTS"
    fi
    
    if [ -s "$HIDDEN_FILE_RESULTS" ]; then
      echo
      echo "==================== HIDDEN FILES ===================="
      cat "$HIDDEN_FILE_RESULTS"
    fi
    
    # Quarantine info
    if [ -n "$QUARANTINE_DIR" ]; then
      echo
      echo "==================== QUARANTINE INFO ===================="
      echo "Quarantine Directory: $QUARANTINE_DIR"
      echo "Files were moved to quarantine for further analysis."
    fi
    
    print_with_separator "End of Malware Scan Report"
  } > "$report_file"
  
  format-echo "SUCCESS" "Detailed report saved to: $report_file"
  return 0
}

# Print scan summary in table format
print_scan_summary() {
  local total_suspicious
  
  # Count suspicious files
  total_suspicious=$(wc -l < "$MASTER_RESULTS")
  
  print_with_separator "Malware Scan Results"
  echo "Scan Directory: $SCAN_DIR"
  echo "Date: $(date)"
  echo
  
  # Create table header with proper alignment
  printf "%-30s %-15s\n" "DETECTION CATEGORY" "FILES FOUND"
  echo "----------------------------------------------------------------------------------------"
  
  # Table rows for each category with consistent formatting
  printf "%-30s %-15s\n" "Total Suspicious" "$total_suspicious"
  
  if [ -f "$EXECUTABLE_RESULTS" ]; then
    printf "%-30s %-15s\n" "Executable Files" "$(wc -l < "$EXECUTABLE_RESULTS")"
  fi
  
  if [ -f "$SCRIPT_RESULTS" ]; then
    printf "%-30s %-15s\n" "Script Files" "$(wc -l < "$SCRIPT_RESULTS")"
  fi
  
  if [ -f "$SUSPICIOUS_NAME_RESULTS" ]; then
    printf "%-30s %-15s\n" "Suspicious Filenames" "$(wc -l < "$SUSPICIOUS_NAME_RESULTS")"
  fi
  
  if [ -f "$SUSPICIOUS_CONTENT_RESULTS" ]; then
    printf "%-30s %-15s\n" "Suspicious Content" "$(wc -l < "$SUSPICIOUS_CONTENT_RESULTS")"
  fi
  
  if [ -f "$SUSPICIOUS_PERMISSION_RESULTS" ]; then
    printf "%-30s %-15s\n" "Suspicious Permissions" "$(wc -l < "$SUSPICIOUS_PERMISSION_RESULTS")"
  fi
  
  if [ -f "$LARGE_FILE_RESULTS" ]; then
    printf "%-30s %-15s\n" "Large Files" "$(wc -l < "$LARGE_FILE_RESULTS")"
  fi
  
  if [ -f "$HIDDEN_FILE_RESULTS" ]; then
    printf "%-30s %-15s\n" "Hidden Files" "$(wc -l < "$HIDDEN_FILE_RESULTS")"
  fi
  
  # Table footer
  echo "----------------------------------------------------------------------------------------"
  
  # Add summary line
  echo "Summary: $total_suspicious suspicious files detected across $(ls -1 "$SCRIPT_DIR" | wc -l) categories"
  
  # Add additional information below the table
  if [ -n "$REPORT_FILE" ]; then
    echo "Detailed report saved to: $REPORT_FILE"
  fi
  
  if [ -n "$QUARANTINE_DIR" ]; then
    echo "Quarantine directory: $QUARANTINE_DIR"
  fi
  
  # Add recommendations based on findings
  if [ "$total_suspicious" -gt 0 ]; then
    echo
    echo "Recommendations:"
    echo "  - Review suspicious files in detail using --report option or --verbose option"
    if [ -n "$REPORT_FILE" ]; then
      echo "  - Examine the full report for specific file paths"
    fi
    if [ -z "$QUARANTINE_DIR" ]; then
      echo "  - Consider using --quarantine option to isolate suspicious files"
    fi
  fi
  
  print_with_separator "End of Malware Scan Results"
}

#=====================================================================
# MAIN FUNCTION
#=====================================================================
main() {
  #---------------------------------------------------------------------
  # INITIALIZATION
  #---------------------------------------------------------------------
  parse_args "$@"

  # Configure log file
  if [ -n "$LOG_FILE" ] && [ "$LOG_FILE" != "/dev/null" ]; then
    if ! touch "$LOG_FILE" 2>/dev/null; then
      echo -e "\033[1;31mError:\033[0m Cannot write to log file $LOG_FILE."
      exit 1
    fi
    exec > >(tee -a "$LOG_FILE") 2>&1
  fi

  print_with_separator "Malware Scanner Script"
  format-echo "INFO" "Starting Malware Scanner Script..."

  #---------------------------------------------------------------------
  # VALIDATION
  #---------------------------------------------------------------------
  # Validate scan directory
  if [ -z "$SCAN_DIR" ]; then
    format-echo "ERROR" "Scan directory is required."
    usage
  fi

  if [ ! -d "$SCAN_DIR" ]; then
    format-echo "ERROR" "Directory does not exist: $SCAN_DIR"
    exit 1
  fi

  # Validate quarantine directory if specified
  if [ -n "$QUARANTINE_DIR" ]; then
    if [ "$QUARANTINE_DIR" = "$SCAN_DIR" ]; then
      format-echo "ERROR" "Quarantine directory cannot be the same as scan directory."
      exit 1
    fi
    
    # Try to create quarantine directory if it doesn't exist
    if [ ! -d "$QUARANTINE_DIR" ]; then
      if ! mkdir -p "$QUARANTINE_DIR"; then
        format-echo "ERROR" "Failed to create quarantine directory: $QUARANTINE_DIR"
        exit 1
      fi
    fi
    
    # Check if quarantine directory is writable
    if [ ! -w "$QUARANTINE_DIR" ]; then
      format-echo "ERROR" "Quarantine directory is not writable: $QUARANTINE_DIR"
      exit 1
    fi
  fi
  
  # Validate report file if specified
  if [ -n "$REPORT_FILE" ]; then
    # Try to create report file to check write permissions
    if ! touch "$REPORT_FILE" 2>/dev/null; then
      format-echo "ERROR" "Cannot write to report file: $REPORT_FILE"
      exit 1
    fi
  fi

  #---------------------------------------------------------------------
  # SCANNING
  #---------------------------------------------------------------------
  # Initialize scan results
  initialize_scan_results

  # Perform scan
  format-echo "INFO" "Scanning directory: $SCAN_DIR"
  format-echo "INFO" "Scan depth: $([ "$SCAN_DEPTH" -lt 0 ] && echo "Unlimited" || echo "$SCAN_DEPTH")"
  
  if ! scan_directory "$SCAN_DIR"; then
    format-echo "ERROR" "Scan failed."
    print_with_separator "End of Malware Scanner Script"
    exit 1
  fi

  #---------------------------------------------------------------------
  # REPORTING AND QUARANTINE
  #---------------------------------------------------------------------
  # Quarantine suspicious files if requested
  if [ -n "$QUARANTINE_DIR" ]; then
    if ! quarantine_files "$QUARANTINE_DIR"; then
      format-echo "ERROR" "Failed to quarantine suspicious files."
    fi
  fi
  
  # Generate detailed report if requested
  if [ -n "$REPORT_FILE" ]; then
    if ! generate_report "$REPORT_FILE"; then
      format-echo "ERROR" "Failed to generate detailed report."
    fi
  fi
  
  # Print scan summary if requested
  if [ "$SCAN_SUMMARY" = true ]; then
    print_scan_summary
  fi

  format-echo "SUCCESS" "Malware scan completed successfully."
  print_with_separator "End of Malware Scanner Script"
}

#=====================================================================
# SCRIPT EXECUTION
#=====================================================================
main "$@"
